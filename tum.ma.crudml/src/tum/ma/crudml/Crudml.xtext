grammar tum.ma.crudml.Crudml with org.eclipse.xtext.common.Terminals

generate crudml "http://www.ma.tum/crudml/Crudml"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Domainmodel:
  (elements += AbstractElement)*
;
/*
terminal CUSTOMSTRING	: 
			'"' ('0'..'9' | 'A'..'Z' | 'a'..'z' | 'Ä' | 'Ö' | 'Ü' | 'ä' | 'ö' | 'ü' | 'ß') ('0'..'9' | 'A'..'Z' | 'a'..'z' | ' ' | 'Ä' | 'Ö' | 'Ü' | 'ä' | 'ö' | 'ü' | 'ß')* ('0'..'9' | 'A'..'Z' | 'a'..'z' | 'Ä' | 'Ö' | 'Ü' | 'ä' | 'ö' | 'ü' | 'ß') '"' |
			"'" ('0'..'9' | 'A'..'Z' | 'a'..'z' | 'Ä' | 'Ö' | 'Ü' | 'ä' | 'ö' | 'ü' | 'ß') ('0'..'9' | 'A'..'Z' | 'a'..'z' | ' ' | 'Ä' | 'Ö' | 'Ü' | 'ä' | 'ö' | 'ü' | 'ß')* ('0'..'9' | 'A'..'Z' | 'a'..'z' | 'Ä' | 'Ö' | 'Ü' | 'ä' | 'ö' | 'ü' | 'ß') "'"
; 
 */

/* Package & import block */ 
PackageDeclaration:
  'package' name = QualifiedName '{'
    (elements += AbstractElement)*
  '}'
;
 
AbstractElement:
  PackageDeclaration | Entity | Import | Right | Role | Metadata | Persistence
;
 
QualifiedName:
  ID ('.' ID)*
;
 
Import:
  'import' importedNamespace = QualifiedNameWithWildcard
;
  
QualifiedNameWithWildcard:
  QualifiedName '.*'?
;

Metadata:
	'metadata' 
	'{'
	  (entries += MetadataEntry)*
	'}'
;

MetadataEntry:
	(type = ('workspace' | 'applicationName' | 'author' )) ':' value = ID
;

Persistence:
	'persistence' 
	'{'
	  (entries += PersistenceEntry)*
	'}'
;

PersistenceEntry:
	DBConnectionDefinition | DBTypeDefiniton | DBSetupDefinition
;

DBConnectionDefinition:
	((type = ('user' | 'password') ':' value = ID)) | (type = 'path' ':' value = STRING)
;

DBTypeDefiniton:
	'type' ':' value = ('derby')
;

DBSetupDefinition:
	'setup' ':' value = ('dropAndCreate' | 'none')
;
  
/* Entity block */
Entity:
  'entity' name = ID             
  '{'
    (attributes += Attribute)*
  '}'
;

/* Attribute block */
Attribute:	
	Reference | Member
;

Member:
    (annotations += Annotation)*	
	name = ID ':' (type = [Entity | QualifiedName] | primitive = ('string' | 'int' | 'boolean' | 'long' | 'double'))
;

Reference:
	(annotations += Annotation)*	
	reftype = ('many' | 'one') name = ID ':' type = [Entity]
;


/* Annotation block */
Annotation:
	annotation ='@NotNull' | 
	annotation = '@Descriptor' | 
	annotation = '@Name('name = STRING')' |
	annotation = '@Length('length = INT')'
;

/* Operations block */
Operations:
	('all' | (Operation)+)
;

Operation:
	'create' | 'read' | 'update' |'delete'
;

/* Rights and access control */

Role:
  'role' name = ID             
  '{'
  	('init' initialization = ('assigned' | 'first'))?
    (rights += [Right] | 'all')*
  '}'
;

Right:
  'right' name = ID             
  ('{'
    (accesses += Access)*
  '}')?
;

Access:
	type = [Entity | QualifiedName] ':' operations = Operations
;
